<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nito.AsyncEx.Tasks</name>
    </assembly>
    <members>
        <member name="T:Nito.AsyncEx.AwaitableDisposable`1">
            <summary>
            An awaitable wrapper around a task whose result is disposable. The wrapper is not disposable, so this prevents usage errors like "using (MyAsync())" when the appropriate usage should be "using (await MyAsync())".
            </summary>
            <typeparam name="T">The type of the result of the underlying task.</typeparam>
        </member>
        <member name="F:Nito.AsyncEx.AwaitableDisposable`1._task">
            <summary>
            The underlying task.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.AwaitableDisposable`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a new awaitable wrapper around the specified task.
            </summary>
            <param name="task">The underlying task to wrap. This may not be <c>null</c>.</param>
        </member>
        <member name="M:Nito.AsyncEx.AwaitableDisposable`1.AsTask">
            <summary>
            Returns the underlying task.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.AwaitableDisposable`1.op_Implicit(Nito.AsyncEx.AwaitableDisposable{`0})~System.Threading.Tasks.Task{`0}">
            <summary>
            Implicit conversion to the underlying task.
            </summary>
            <param name="source">The awaitable wrapper.</param>
        </member>
        <member name="M:Nito.AsyncEx.AwaitableDisposable`1.GetAwaiter">
            <summary>
            Infrastructure. Returns the task awaiter for the underlying task.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.AwaitableDisposable`1.ConfigureAwait(System.Boolean)">
            <summary>
            Infrastructure. Returns a configured task awaiter for the underlying task.
            </summary>
            <param name="continueOnCapturedContext">Whether to attempt to marshal the continuation back to the captured context.</param>
        </member>
        <member name="T:Nito.AsyncEx.CancellationTokenTaskSource`1">
            <summary>
            Holds the task for a cancellation token, as well as the token registration. The registration is disposed when this instance is disposed.
            </summary>
        </member>
        <member name="F:Nito.AsyncEx.CancellationTokenTaskSource`1._registration">
            <summary>
            The cancellation token registration, if any. This is <c>null</c> if the registration was not necessary.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.CancellationTokenTaskSource`1.#ctor(System.Threading.CancellationToken)">
            <summary>
            Creates a task for the specified cancellation token, registering with the token if necessary.
            </summary>
            <param name="cancellationToken">The cancellation token to observe.</param>
        </member>
        <member name="P:Nito.AsyncEx.CancellationTokenTaskSource`1.Task">
            <summary>
            Gets the task for the source cancellation token.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.CancellationTokenTaskSource`1.Dispose">
            <summary>
            Disposes the cancellation token registration, if any. Note that this may cause <see cref="P:Nito.AsyncEx.CancellationTokenTaskSource`1.Task"/> to never complete.
            </summary>
        </member>
        <member name="T:Nito.AsyncEx.Interop.ApmAsyncFactory">
            <summary>
            Creation methods for tasks wrapping the Asynchronous Programming Model (APM), and APM wrapper methods around tasks.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.Interop.ApmAsyncFactory.ToBegin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)">
            <summary>
            Wraps a <see cref="T:System.Threading.Tasks.Task"/> into the Begin method of an APM pattern.
            </summary>
            <param name="task">The task to wrap.</param>
            <param name="callback">The callback method passed into the Begin method of the APM pattern.</param>
            <param name="state">The state passed into the Begin method of the APM pattern.</param>
            <returns>The asynchronous operation, to be returned by the Begin method of the APM pattern.</returns>
        </member>
        <member name="M:Nito.AsyncEx.Interop.ApmAsyncFactory.ToEnd(System.IAsyncResult)">
            <summary>
            Wraps a <see cref="T:System.Threading.Tasks.Task"/> into the End method of an APM pattern.
            </summary>
            <param name="asyncResult">The asynchronous operation returned by the matching Begin method of this APM pattern.</param>
            <returns>The result of the asynchronous operation, to be returned by the End method of the APM pattern.</returns>
        </member>
        <member name="M:Nito.AsyncEx.Interop.ApmAsyncFactory.ToBegin``1(System.Threading.Tasks.Task{``0},System.AsyncCallback,System.Object)">
            <summary>
            Wraps a <see cref="T:System.Threading.Tasks.Task`1"/> into the Begin method of an APM pattern.
            </summary>
            <param name="task">The task to wrap. May not be <c>null</c>.</param>
            <param name="callback">The callback method passed into the Begin method of the APM pattern.</param>
            <param name="state">The state passed into the Begin method of the APM pattern.</param>
            <returns>The asynchronous operation, to be returned by the Begin method of the APM pattern.</returns>
        </member>
        <member name="M:Nito.AsyncEx.Interop.ApmAsyncFactory.ToEnd``1(System.IAsyncResult)">
            <summary>
            Wraps a <see cref="T:System.Threading.Tasks.Task`1"/> into the End method of an APM pattern.
            </summary>
            <param name="asyncResult">The asynchronous operation returned by the matching Begin method of this APM pattern.</param>
            <returns>The result of the asynchronous operation, to be returned by the End method of the APM pattern.</returns>
        </member>
        <member name="T:Nito.AsyncEx.Interop.EventArguments`2">
            <summary>
            Arguments passed to a .NET event that follows the standard <c>sender, arguments</c> event pattern.
            </summary>
            <typeparam name="TSender">The type of the sender of the event. This is commonly <see cref="T:System.Object"/>.</typeparam>
            <typeparam name="TEventArgs">The type of the event arguments. This is commonly <see cref="P:Nito.AsyncEx.Interop.EventArguments`2.EventArgs"/> or a derived type.</typeparam>
        </member>
        <member name="P:Nito.AsyncEx.Interop.EventArguments`2.Sender">
            <summary>
            The sender of the event.
            </summary>
        </member>
        <member name="P:Nito.AsyncEx.Interop.EventArguments`2.EventArgs">
            <summary>
            The event arguments.
            </summary>
        </member>
        <member name="T:Nito.AsyncEx.Interop.EventAsyncFactory">
            <summary>
            Creation methods for tasks wrapping events.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromAnyEvent``2(System.Func{System.Action{``1},``0},System.Action{``0},System.Action{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that are of any type.
            </summary>
            <typeparam name="TDelegate">The type of the event delegate.</typeparam>
            <typeparam name="TEventArguments">A type containing all event arguments.</typeparam>
            <param name="convert">A conversion delegate that takes an <see cref="T:System.Action`1"/> and converts it to a <typeparamref name="TDelegate"/>. This is generally of the form <c>x => (...) => x(new TEventArguments(...))</c>.</param>
            <param name="subscribe">A method that takes a <typeparamref name="TDelegate"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes an <typeparamref name="TDelegate"/> and unsubscribes it from the event. This method is invoked in a captured context if <paramref name="unsubscribeOnCapturedContext"/> is <c>true</c>.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the task (and unsubscribe from the event handler).</param>
            <param name="unsubscribeOnCapturedContext">Whether to invoke <paramref name="unsubscribe"/> on a captured context.</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromAnyEvent``2(System.Func{System.Action{``1},``0},System.Action{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that are of any type.
            </summary>
            <typeparam name="TDelegate">The type of the event delegate.</typeparam>
            <typeparam name="TEventArguments">A type containing all event arguments.</typeparam>
            <param name="convert">A conversion delegate that takes an <see cref="T:System.Action`1"/> and converts it to a <typeparamref name="TDelegate"/>. This is generally of the form <c>x => (...) => x(new TEventArguments(...))</c>.</param>
            <param name="subscribe">A method that takes a <typeparamref name="TDelegate"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes a <typeparamref name="TDelegate"/> and unsubscribes it from the event. This method is always invoked in a captured context.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the task (and unsubscribe from the event handler).</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromAnyEvent``2(System.Func{System.Action{``1},``0},System.Action{``0},System.Action{``0})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that are of any type.
            </summary>
            <typeparam name="TDelegate">The type of the event delegate.</typeparam>
            <typeparam name="TEventArguments">A type containing all event arguments.</typeparam>
            <param name="convert">A conversion delegate that takes an <see cref="T:System.Action`1"/> and converts it to a <typeparamref name="TDelegate"/>. This is generally of the form <c>x => (...) => x(new TEventArguments(...))</c>.</param>
            <param name="subscribe">A method that takes a <typeparamref name="TDelegate"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes a <typeparamref name="TDelegate"/> and unsubscribes it from the event. This method is always invoked in a captured context.</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromEvent(System.Action{System.EventHandler},System.Action{System.EventHandler},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that are of type <see cref="T:System.EventHandler"/>.
            </summary>
            <param name="subscribe">A method that takes a <see cref="T:System.EventHandler"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes an <see cref="T:System.EventHandler"/> and unsubscribes it from the event. This method is invoked in a captured context if <paramref name="unsubscribeOnCapturedContext"/> is <c>true</c>.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the task (and unsubscribe from the event handler).</param>
            <param name="unsubscribeOnCapturedContext">Whether to invoke <paramref name="unsubscribe"/> on a captured context.</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromEvent(System.Action{System.EventHandler},System.Action{System.EventHandler},System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that are of type <see cref="T:System.EventHandler"/>.
            </summary>
            <param name="subscribe">A method that takes a <see cref="T:System.EventHandler"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes a <see cref="T:System.EventHandler"/> and unsubscribes it from the event. This method is always invoked in a captured context.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the task (and unsubscribe from the event handler).</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromEvent(System.Action{System.EventHandler},System.Action{System.EventHandler})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that are of type <see cref="T:System.EventHandler"/>.
            </summary>
            <param name="subscribe">A method that takes a <see cref="T:System.EventHandler"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes a <see cref="T:System.EventHandler"/> and unsubscribes it from the event. This method is always invoked in a captured context.</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromEvent``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that are of type <see cref="T:System.EventHandler`1"/>.
            </summary>
            <typeparam name="TEventArgs">The type of the "arguments" (the second event argument).</typeparam>
            <param name="subscribe">A method that takes a <see cref="T:System.EventHandler`1"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes an <see cref="T:System.EventHandler`1"/> and unsubscribes it from the event. This method is invoked in a captured context if <paramref name="unsubscribeOnCapturedContext"/> is <c>true</c>.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the task (and unsubscribe from the event handler).</param>
            <param name="unsubscribeOnCapturedContext">Whether to invoke <paramref name="unsubscribe"/> on a captured context.</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromEvent``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that are of type <see cref="T:System.EventHandler`1"/>.
            </summary>
            <typeparam name="TEventArgs">The type of the "arguments" (the second event argument).</typeparam>
            <param name="subscribe">A method that takes a <see cref="T:System.EventHandler`1"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes a <see cref="T:System.EventHandler`1"/> and unsubscribes it from the event. This method is always invoked in a captured context.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the task (and unsubscribe from the event handler).</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromEvent``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that are of type <see cref="T:System.EventHandler`1"/>.
            </summary>
            <typeparam name="TEventArgs">The type of the "arguments" (the second event argument).</typeparam>
            <param name="subscribe">A method that takes a <see cref="T:System.EventHandler`1"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes a <see cref="T:System.EventHandler`1"/> and unsubscribes it from the event. This method is always invoked in a captured context.</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromEvent``2(System.Func{System.EventHandler{``1},``0},System.Action{``0},System.Action{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that follow the standard <c>sender, eventArgs</c> pattern but with a custom delegate type.
            </summary>
            <typeparam name="TDelegate">The type of the event delegate.</typeparam>
            <typeparam name="TEventArgs">The type of the "arguments" (the second event argument).</typeparam>
            <param name="convert">A conversion delegate that takes an <see cref="T:System.EventHandler`1"/> and converts it to a <typeparamref name="TDelegate"/>. If the type parameters are specified explicitly, this should be <c>x => x.Invoke</c>. If the type parameters are inferred, this should be <c>(EventHandler&lt;TEventArgs&gt; x) => new TDelegate(x)</c> with appropriate substitutions for <typeparamref name="TEventArgs"/> and <typeparamref name="TDelegate"/>.</param>
            <param name="subscribe">A method that takes a <typeparamref name="TDelegate"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes an <typeparamref name="TDelegate"/> and unsubscribes it from the event. This method is invoked in a captured context if <paramref name="unsubscribeOnCapturedContext"/> is <c>true</c>.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the task (and unsubscribe from the event handler).</param>
            <param name="unsubscribeOnCapturedContext">Whether to invoke <paramref name="unsubscribe"/> on a captured context.</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromEvent``2(System.Func{System.EventHandler{``1},``0},System.Action{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that follow the standard <c>sender, eventArgs</c> pattern but with a custom delegate type.
            </summary>
            <typeparam name="TDelegate">The type of the event delegate.</typeparam>
            <typeparam name="TEventArgs">The type of the "arguments" (the second event argument).</typeparam>
            <param name="convert">A conversion delegate that takes an <see cref="T:System.EventHandler`1"/> and converts it to a <typeparamref name="TDelegate"/>. If the type parameters are specified explicitly, this should be <c>x => x.Invoke</c>. If the type parameters are inferred, this should be <c>(EventHandler&lt;TEventArgs&gt; x) => new TDelegate(x)</c> with appropriate substitutions for <typeparamref name="TEventArgs"/> and <typeparamref name="TDelegate"/>.</param>
            <param name="subscribe">A method that takes a <typeparamref name="TDelegate"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes a <typeparamref name="TDelegate"/> and unsubscribes it from the event. This method is always invoked in a captured context.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the task (and unsubscribe from the event handler).</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromEvent``2(System.Func{System.EventHandler{``1},``0},System.Action{``0},System.Action{``0})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that follow the standard <c>sender, eventArgs</c> pattern but with a custom delegate type.
            </summary>
            <typeparam name="TDelegate">The type of the event delegate.</typeparam>
            <typeparam name="TEventArgs">The type of the "arguments" (the second event argument).</typeparam>
            <param name="convert">A conversion delegate that takes an <see cref="T:System.EventHandler`1"/> and converts it to a <typeparamref name="TDelegate"/>. If the type parameters are specified explicitly, this should be <c>x => x.Invoke</c>. If the type parameters are inferred, this should be <c>(EventHandler&lt;TEventArgs&gt; x) => new TDelegate(x)</c> with appropriate substitutions for <typeparamref name="TEventArgs"/> and <typeparamref name="TDelegate"/>.</param>
            <param name="subscribe">A method that takes a <typeparamref name="TDelegate"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes a <typeparamref name="TDelegate"/> and unsubscribes it from the event. This method is always invoked in a captured context.</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromActionEvent``2(System.Action{System.Action{``0,``1}},System.Action{System.Action{``0,``1}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that are of type <see cref="T:System.Action`2"/>.
            </summary>
            <typeparam name="TSender">The type of the "sender" (the first event argument).</typeparam>
            <typeparam name="TEventArgs">The type of the "arguments" (the second event argument).</typeparam>
            <param name="subscribe">A method that takes an <see cref="T:System.Action`2"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes an <see cref="T:System.Action`2"/> and unsubscribes it from the event. This method is invoked in a captured context if <paramref name="unsubscribeOnCapturedContext"/> is <c>true</c>.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the task (and unsubscribe from the event handler).</param>
            <param name="unsubscribeOnCapturedContext">Whether to invoke <paramref name="unsubscribe"/> on a captured context.</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromActionEvent``2(System.Action{System.Action{``0,``1}},System.Action{System.Action{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that are of type <see cref="T:System.Action`2"/>.
            </summary>
            <typeparam name="TSender">The type of the "sender" (the first event argument).</typeparam>
            <typeparam name="TEventArgs">The type of the "arguments" (the second event argument).</typeparam>
            <param name="subscribe">A method that takes an <see cref="T:System.Action`2"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes an <see cref="T:System.Action`2"/> and unsubscribes it from the event. This method is always invoked in a captured context.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the task (and unsubscribe from the event handler).</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromActionEvent``2(System.Action{System.Action{``0,``1}},System.Action{System.Action{``0,``1}})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that are of type <see cref="T:System.Action`2"/>.
            </summary>
            <typeparam name="TSender">The type of the "sender" (the first event argument).</typeparam>
            <typeparam name="TEventArgs">The type of the "arguments" (the second event argument).</typeparam>
            <param name="subscribe">A method that takes an <see cref="T:System.Action`2"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes an <see cref="T:System.Action`2"/> and unsubscribes it from the event. This method is always invoked in a captured context.</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromActionEvent``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that are of type <see cref="T:System.Action`1"/>.
            </summary>
            <typeparam name="TEventArgs">The type of the argument passed to the event handler and used to complete the task.</typeparam>
            <param name="subscribe">A method that takes an <see cref="T:System.Action`1"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes an <see cref="T:System.Action`1"/> and unsubscribes it from the event. This method is invoked in a captured context if <paramref name="unsubscribeOnCapturedContext"/> is <c>true</c>.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the task (and unsubscribe from the event handler).</param>
            <param name="unsubscribeOnCapturedContext">Whether to invoke <paramref name="unsubscribe"/> on a captured context.</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromActionEvent``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that are of type <see cref="T:System.Action`1"/>.
            </summary>
            <typeparam name="TEventArgs">The type of the argument passed to the event handler and used to complete the task.</typeparam>
            <param name="subscribe">A method that takes an <see cref="T:System.Action`1"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes an <see cref="T:System.Action`1"/> and unsubscribes it from the event. This method is always invoked in a captured context.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the task (and unsubscribe from the event handler).</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromActionEvent``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a specified event next fires. This overload is for events that are of type <see cref="T:System.Action`1"/>.
            </summary>
            <typeparam name="TEventArgs">The type of the argument passed to the event handler and used to complete the task.</typeparam>
            <param name="subscribe">A method that takes an <see cref="T:System.Action`1"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes an <see cref="T:System.Action`1"/> and unsubscribes it from the event. This method is always invoked in a captured context.</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromActionEvent(System.Action{System.Action},System.Action{System.Action},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that completes when a specified event next fires. This overload is for events that are of type <see cref="T:System.Action"/>.
            </summary>
            <param name="subscribe">A method that takes an <see cref="T:System.Action"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes an <see cref="T:System.Action"/> and unsubscribes it from the event. This method is invoked in a captured context if <paramref name="unsubscribeOnCapturedContext"/> is <c>true</c>.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the task (and unsubscribe from the event handler).</param>
            <param name="unsubscribeOnCapturedContext">Whether to invoke <paramref name="unsubscribe"/> on a captured context.</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromActionEvent(System.Action{System.Action},System.Action{System.Action},System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that completes when a specified event next fires. This overload is for events that are of type <see cref="T:System.Action"/>.
            </summary>
            <param name="subscribe">A method that takes an <see cref="T:System.Action"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes an <see cref="T:System.Action"/> and unsubscribes it from the event. This method is always invoked in a captured context.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the task (and unsubscribe from the event handler).</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.FromActionEvent(System.Action{System.Action},System.Action{System.Action})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that completes when a specified event next fires. This overload is for events that are of type <see cref="T:System.Action"/>.
            </summary>
            <param name="subscribe">A method that takes an <see cref="T:System.Action"/> and subscribes it to the event.</param>
            <param name="unsubscribe">A method that takes an <see cref="T:System.Action"/> and unsubscribes it from the event. This method is always invoked in a captured context.</param>
            <remarks>
            <para>Calling this method in a loop is often an anti-pattern, because the event is only subscribed to when this method is invoked, and is unsubscribed from when the task completes. From the time the task is completed until this method is called again, the event may fire and be "lost". If you find yourself needing a loop around this method, consider using Rx or TPL Dataflow instead.</para>
            </remarks>
        </member>
        <member name="M:Nito.AsyncEx.Interop.EventAsyncFactory.CreateEventArguments``2(``0,``1)">
            <summary>
            Creates an <see cref="T:Nito.AsyncEx.Interop.EventArguments`2"/> structure.
            </summary>
            <typeparam name="TSender">The type of the sender of the event.</typeparam>
            <typeparam name="TEventArgs">The event arguments.</typeparam>
            <param name="sender">The sender of the event.</param>
            <param name="eventArgs">The event arguments.</param>
        </member>
        <member name="T:Nito.AsyncEx.SemaphoreSlimExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Threading.SemaphoreSlim"/>.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.SemaphoreSlimExtensions.LockAsync(System.Threading.SemaphoreSlim,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits on the semaphore, and returns a disposable that releases the semaphore when disposed, thus treating this semaphore as a "multi-lock".
            </summary>
            <param name="this">The semaphore to lock.</param>
            <param name="cancellationToken">The cancellation token used to cancel the wait.</param>
        </member>
        <member name="M:Nito.AsyncEx.SemaphoreSlimExtensions.LockAsync(System.Threading.SemaphoreSlim)">
            <summary>
            Asynchronously waits on the semaphore, and returns a disposable that releases the semaphore when disposed, thus treating this semaphore as a "multi-lock".
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.SemaphoreSlimExtensions.Lock(System.Threading.SemaphoreSlim,System.Threading.CancellationToken)">
            <summary>
            Synchronously waits on the semaphore, and returns a disposable that releases the semaphore when disposed, thus treating this semaphore as a "multi-lock".
            </summary>
            <param name="this">The semaphore to lock.</param>
            <param name="cancellationToken">The cancellation token used to cancel the wait.</param>
        </member>
        <member name="M:Nito.AsyncEx.SemaphoreSlimExtensions.Lock(System.Threading.SemaphoreSlim)">
            <summary>
            Synchronously waits on the semaphore, and returns a disposable that releases the semaphore when disposed, thus treating this semaphore as a "multi-lock".
            </summary>
            <param name="this">The semaphore to lock.</param>
        </member>
        <member name="T:Nito.AsyncEx.SynchronizationContextExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.SynchronizationContextExtensions.Send(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Synchronously executes a delegate on this synchronization context.
            </summary>
            <param name="this">The synchronization context.</param>
            <param name="action">The delegate to execute.</param>
        </member>
        <member name="M:Nito.AsyncEx.SynchronizationContextExtensions.Send``1(System.Threading.SynchronizationContext,System.Func{``0})">
            <summary>
            Synchronously executes a delegate on this synchronization context and returns its result.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="this">The synchronization context.</param>
            <param name="action">The delegate to execute.</param>
        </member>
        <member name="M:Nito.AsyncEx.SynchronizationContextExtensions.PostAsync(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Asynchronously executes a delegate on this synchronization context.
            </summary>
            <param name="this">The synchronization context.</param>
            <param name="action">The delegate to execute.</param>
        </member>
        <member name="M:Nito.AsyncEx.SynchronizationContextExtensions.PostAsync``1(System.Threading.SynchronizationContext,System.Func{``0})">
            <summary>
            Asynchronously executes a delegate on this synchronization context and returns its result.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="this">The synchronization context.</param>
            <param name="action">The delegate to execute.</param>
        </member>
        <member name="M:Nito.AsyncEx.SynchronizationContextExtensions.PostAsync(System.Threading.SynchronizationContext,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Asynchronously executes an asynchronous delegate on this synchronization context.
            </summary>
            <param name="this">The synchronization context.</param>
            <param name="action">The delegate to execute.</param>
        </member>
        <member name="M:Nito.AsyncEx.SynchronizationContextExtensions.PostAsync``1(System.Threading.SynchronizationContext,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously executes an asynchronous delegate on this synchronization context and returns its result.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="this">The synchronization context.</param>
            <param name="action">The delegate to execute.</param>
        </member>
        <member name="T:Nito.AsyncEx.SynchronizationContextSwitcher">
            <summary>
            Utility class for temporarily switching <see cref="T:System.Threading.SynchronizationContext"/> implementations.
            </summary>
        </member>
        <member name="F:Nito.AsyncEx.SynchronizationContextSwitcher._oldContext">
            <summary>
            The previous <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.SynchronizationContextSwitcher.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.SynchronizationContextSwitcher"/> class, installing the new <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
            <param name="newContext">The new <see cref="T:System.Threading.SynchronizationContext"/>. This can be <c>null</c> to remove an existing <see cref="T:System.Threading.SynchronizationContext"/>.</param>
        </member>
        <member name="M:Nito.AsyncEx.SynchronizationContextSwitcher.Dispose(System.Object)">
            <summary>
            Restores the old <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.SynchronizationContextSwitcher.NoContext(System.Action)">
            <summary>
            Executes a synchronous delegate without the current <see cref="T:System.Threading.SynchronizationContext"/>. The current context is restored when this function returns.
            </summary>
            <param name="action">The delegate to execute.</param>
        </member>
        <member name="M:Nito.AsyncEx.SynchronizationContextSwitcher.NoContext``1(System.Func{``0})">
            <summary>
            Executes a synchronous or asynchronous delegate without the current <see cref="T:System.Threading.SynchronizationContext"/>. The current context is restored when this function synchronously returns.
            </summary>
            <param name="action">The delegate to execute.</param>
        </member>
        <member name="M:Nito.AsyncEx.SynchronizationContextSwitcher.ApplyContext(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Executes a synchronous delegate with the specified <see cref="T:System.Threading.SynchronizationContext"/> as "current". The previous current context is restored when this function returns.
            </summary>
            <param name="context">The context to treat as "current". May be <c>null</c> to indicate the thread pool context.</param>
            <param name="action">The delegate to execute.</param>
        </member>
        <member name="M:Nito.AsyncEx.SynchronizationContextSwitcher.ApplyContext``1(System.Threading.SynchronizationContext,System.Func{``0})">
            <summary>
            Executes a synchronous or asynchronous delegate without the specified <see cref="T:System.Threading.SynchronizationContext"/> as "current". The previous current context is restored when this function synchronously returns.
            </summary>
            <param name="context">The context to treat as "current". May be <c>null</c> to indicate the thread pool context.</param>
            <param name="action">The delegate to execute.</param>
        </member>
        <member name="T:Nito.AsyncEx.Synchronous.TaskExtensions">
            <summary>
            Provides synchronous extension methods for tasks.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.Synchronous.TaskExtensions.WaitAndUnwrapException(System.Threading.Tasks.Task)">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
        </member>
        <member name="M:Nito.AsyncEx.Synchronous.TaskExtensions.WaitAndUnwrapException(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was cancelled before the <paramref name="task"/> completed, or the <paramref name="task"/> raised an <see cref="T:System.OperationCanceledException"/>.</exception>
        </member>
        <member name="M:Nito.AsyncEx.Synchronous.TaskExtensions.WaitAndUnwrapException``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <typeparam name="TResult">The type of the result of the task.</typeparam>
            <param name="task">The task. May not be <c>null</c>.</param>
            <returns>The result of the task.</returns>
        </member>
        <member name="M:Nito.AsyncEx.Synchronous.TaskExtensions.WaitAndUnwrapException``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <typeparam name="TResult">The type of the result of the task.</typeparam>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <returns>The result of the task.</returns>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was cancelled before the <paramref name="task"/> completed, or the <paramref name="task"/> raised an <see cref="T:System.OperationCanceledException"/>.</exception>
        </member>
        <member name="M:Nito.AsyncEx.Synchronous.TaskExtensions.WaitWithoutException(System.Threading.Tasks.Task)">
            <summary>
            Waits for the task to complete, but does not raise task exceptions. The task exception (if any) is unobserved.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
        </member>
        <member name="M:Nito.AsyncEx.Synchronous.TaskExtensions.WaitWithoutException(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete, but does not raise task exceptions. The task exception (if any) is unobserved.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was cancelled before the <paramref name="task"/> completed.</exception>
        </member>
        <member name="T:Nito.AsyncEx.TaskCompletionSourceExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.TaskCompletionSourceExtensions.TryCompleteFromCompletedTask``2(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``1})">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>, propagating the completion of <paramref name="task"/>.
            </summary>
            <typeparam name="TResult">The type of the result of the target asynchronous operation.</typeparam>
            <typeparam name="TSourceResult">The type of the result of the source asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="task">The task. May not be <c>null</c>.</param>
            <returns><c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
        </member>
        <member name="M:Nito.AsyncEx.TaskCompletionSourceExtensions.TryCompleteFromCompletedTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task,System.Func{``0})">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>, propagating the completion of <paramref name="task"/> but using the result value from <paramref name="resultFunc"/> if the task completed successfully.
            </summary>
            <typeparam name="TResult">The type of the result of the target asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="resultFunc">A delegate that returns the result with which to complete the task completion source, if the task completed successfully. May not be <c>null</c>.</param>
            <returns><c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
        </member>
        <member name="M:Nito.AsyncEx.TaskCompletionSourceExtensions.CreateAsyncTaskSource``1">
            <summary>
            Creates a new TCS for use with async code, and which forces its continuations to execute asynchronously.
            </summary>
            <typeparam name="TResult">The type of the result of the TCS.</typeparam>
        </member>
        <member name="T:Nito.AsyncEx.TaskConstants">
            <summary>
            Provides completed task constants.
            </summary>
        </member>
        <member name="P:Nito.AsyncEx.TaskConstants.BooleanTrue">
            <summary>
            A task that has been completed with the value <c>true</c>.
            </summary>
        </member>
        <member name="P:Nito.AsyncEx.TaskConstants.BooleanFalse">
            <summary>
            A task that has been completed with the value <c>false</c>.
            </summary>
        </member>
        <member name="P:Nito.AsyncEx.TaskConstants.Int32Zero">
            <summary>
            A task that has been completed with the value <c>0</c>.
            </summary>
        </member>
        <member name="P:Nito.AsyncEx.TaskConstants.Int32NegativeOne">
            <summary>
            A task that has been completed with the value <c>-1</c>.
            </summary>
        </member>
        <member name="P:Nito.AsyncEx.TaskConstants.Completed">
            <summary>
            A <see cref="T:System.Threading.Tasks.Task"/> that has been completed.
            </summary>
        </member>
        <member name="P:Nito.AsyncEx.TaskConstants.Canceled">
            <summary>
            A task that has been canceled.
            </summary>
        </member>
        <member name="T:Nito.AsyncEx.TaskConstants`1">
            <summary>
            Provides completed task constants.
            </summary>
            <typeparam name="T">The type of the task result.</typeparam>
        </member>
        <member name="P:Nito.AsyncEx.TaskConstants`1.Default">
            <summary>
            A task that has been completed with the default value of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:Nito.AsyncEx.TaskConstants`1.Canceled">
            <summary>
            A task that has been canceled.
            </summary>
        </member>
        <member name="T:Nito.AsyncEx.TaskExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.Task`1"/> types.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.TaskExtensions.WaitAsync(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for the task to complete, or for the cancellation token to be canceled.
            </summary>
            <param name="this">The task to wait for. May not be <c>null</c>.</param>
            <param name="cancellationToken">The cancellation token that cancels the wait.</param>
        </member>
        <member name="M:Nito.AsyncEx.TaskExtensions.WaitAsync``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for the task to complete, or for the cancellation token to be canceled.
            </summary>
            <typeparam name="TResult">The type of the task result.</typeparam>
            <param name="this">The task to wait for. May not be <c>null</c>.</param>
            <param name="cancellationToken">The cancellation token that cancels the wait.</param>
        </member>
        <member name="M:Nito.AsyncEx.TaskExtensions.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for any of the source tasks to complete, or for the cancellation token to be canceled.
            </summary>
            <param name="this">The tasks to wait for. May not be <c>null</c>.</param>
            <param name="cancellationToken">The cancellation token that cancels the wait.</param>
        </member>
        <member name="M:Nito.AsyncEx.TaskExtensions.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Asynchronously waits for any of the source tasks to complete.
            </summary>
            <param name="this">The tasks to wait for. May not be <c>null</c>.</param>
        </member>
        <member name="M:Nito.AsyncEx.TaskExtensions.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for any of the source tasks to complete, or for the cancellation token to be canceled.
            </summary>
            <typeparam name="TResult">The type of the task results.</typeparam>
            <param name="this">The tasks to wait for. May not be <c>null</c>.</param>
            <param name="cancellationToken">The cancellation token that cancels the wait.</param>
        </member>
        <member name="M:Nito.AsyncEx.TaskExtensions.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously waits for any of the source tasks to complete.
            </summary>
            <typeparam name="TResult">The type of the task results.</typeparam>
            <param name="this">The tasks to wait for. May not be <c>null</c>.</param>
        </member>
        <member name="M:Nito.AsyncEx.TaskExtensions.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Asynchronously waits for all of the source tasks to complete.
            </summary>
            <param name="this">The tasks to wait for. May not be <c>null</c>.</param>
        </member>
        <member name="M:Nito.AsyncEx.TaskExtensions.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously waits for all of the source tasks to complete.
            </summary>
            <typeparam name="TResult">The type of the task results.</typeparam>
            <param name="this">The tasks to wait for. May not be <c>null</c>.</param>
        </member>
        <member name="M:Nito.AsyncEx.TaskExtensions.Ignore(System.Threading.Tasks.Task)">
            <summary>
            DANGEROUS! Ignores the completion of this task. Also ignores exceptions.
            </summary>
            <param name="this">The task to ignore.</param>
        </member>
        <member name="M:Nito.AsyncEx.TaskExtensions.Ignore``1(System.Threading.Tasks.Task{``0})">
            <summary>
            DANGEROUS! Ignores the completion and results of this task. Also ignores exceptions.
            </summary>
            <param name="this">The task to ignore.</param>
        </member>
        <member name="M:Nito.AsyncEx.TaskExtensions.OrderByCompletion``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a new collection of tasks that complete in order.
            </summary>
            <typeparam name="T">The type of the results of the tasks.</typeparam>
            <param name="this">The tasks to order by completion. May not be <c>null</c>.</param>
        </member>
        <member name="M:Nito.AsyncEx.TaskExtensions.OrderByCompletion(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a new collection of tasks that complete in order.
            </summary>
            <param name="this">The tasks to order by completion. May not be <c>null</c>.</param>
        </member>
        <member name="T:Nito.AsyncEx.TaskFactoryExtensions">
            <summary>
            Provides extension methods for task factories.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.TaskFactoryExtensions.Run(System.Threading.Tasks.TaskFactory,System.Action)">
            <summary>
            Queues work to the task factory and returns a <see cref="T:System.Threading.Tasks.Task"/> representing that work. If the task factory does not specify a task scheduler, the thread pool task scheduler is used.
            </summary>
            <param name="this">The <see cref="T:System.Threading.Tasks.TaskFactory"/>. May not be <c>null</c>.</param>
            <param name="action">The action delegate to execute. May not be <c>null</c>.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:Nito.AsyncEx.TaskFactoryExtensions.Run``1(System.Threading.Tasks.TaskFactory,System.Func{``0})">
            <summary>
            Queues work to the task factory and returns a <see cref="T:System.Threading.Tasks.Task`1"/> representing that work. If the task factory does not specify a task scheduler, the thread pool task scheduler is used.
            </summary>
            <param name="this">The <see cref="T:System.Threading.Tasks.TaskFactory"/>. May not be <c>null</c>.</param>
            <param name="action">The action delegate to execute. May not be <c>null</c>.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:Nito.AsyncEx.TaskFactoryExtensions.Run(System.Threading.Tasks.TaskFactory,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Queues work to the task factory and returns a proxy <see cref="T:System.Threading.Tasks.Task"/> representing that work. If the task factory does not specify a task scheduler, the thread pool task scheduler is used.
            </summary>
            <param name="this">The <see cref="T:System.Threading.Tasks.TaskFactory"/>. May not be <c>null</c>.</param>
            <param name="action">The action delegate to execute. May not be <c>null</c>.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:Nito.AsyncEx.TaskFactoryExtensions.Run``1(System.Threading.Tasks.TaskFactory,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Queues work to the task factory and returns a proxy <see cref="T:System.Threading.Tasks.Task`1"/> representing that work. If the task factory does not specify a task scheduler, the thread pool task scheduler is used.
            </summary>
            <param name="this">The <see cref="T:System.Threading.Tasks.TaskFactory"/>. May not be <c>null</c>.</param>
            <param name="action">The action delegate to execute. May not be <c>null</c>.</param>
            <returns>The started task.</returns>
        </member>
        <member name="T:Nito.AsyncEx.TaskHelper">
            <summary>
            Helper methods for working with tasks.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.TaskHelper.ExecuteAsTask(System.Action)">
            <summary>
            Executes a delegate synchronously, and captures its result in a task. The returned task is already completed.
            </summary>
            <param name="func">The delegate to execute synchronously.</param>
        </member>
        <member name="M:Nito.AsyncEx.TaskHelper.ExecuteAsTask``1(System.Func{``0})">
            <summary>
            Executes a delegate synchronously, and captures its result in a task. The returned task is already completed.
            </summary>
            <param name="func">The delegate to execute synchronously.</param>
        </member>
        <member name="M:ExceptionHelpers.PrepareForRethrow(System.Exception)">
            <summary>
            Attempts to prepare the exception for re-throwing by preserving the stack trace. The returned exception should be immediately thrown.
            </summary>
            <param name="exception">The exception. May not be <c>null</c>.</param>
            <returns>The <see cref="T:System.Exception"/> that was passed into this method.</returns>
        </member>
    </members>
</doc>
