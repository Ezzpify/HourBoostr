<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nito.Disposables</name>
    </assembly>
    <members>
        <member name="T:Nito.Disposables.AnonymousAsyncDisposable">
            <summary>
            Equivalent to <see cref="T:Nito.Disposables.AsyncDisposable"/>.
            </summary>
        </member>
        <member name="M:Nito.Disposables.AnonymousAsyncDisposable.#ctor(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Creates a new disposable that executes <paramref name="dispose"/> when disposed.
            </summary>
            <param name="dispose">The delegate to execute when disposed. If this is <c>null</c>, then this instance does nothing when it is disposed.</param>
        </member>
        <member name="M:Nito.Disposables.AnonymousAsyncDisposable.#ctor(System.Func{System.Threading.Tasks.ValueTask},Nito.Disposables.AsyncDisposeFlags)">
            <summary>
            Creates a new disposable that executes <paramref name="dispose"/> when disposed.
            </summary>
            <param name="dispose">The delegate to execute when disposed. If this is <c>null</c>, then this instance does nothing when it is disposed.</param>
            <param name="flags">Flags that control how asynchronous disposal is handled.</param>
        </member>
        <member name="M:Nito.Disposables.AnonymousAsyncDisposable.DisposeAsync(System.Func{System.Threading.Tasks.ValueTask})">
            <inheritdoc />
        </member>
        <member name="M:Nito.Disposables.AnonymousAsyncDisposable.AddAsync(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Adds a delegate to be executed when this instance is disposed. If this instance is already disposed or disposing, then <paramref name="dispose"/> is executed immediately.
            If this method is called multiple times concurrently at the same time this instance is disposed, then the different <paramref name="dispose"/> arguments may be disposed concurrently, even if <see cref="F:Nito.Disposables.AsyncDisposeFlags.ExecuteSerially"/> was specified.
            </summary>
            <param name="dispose">The delegate to add. May be <c>null</c> to indicate no additional action.</param>
        </member>
        <member name="M:Nito.Disposables.AnonymousAsyncDisposable.Create(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Creates a new disposable that executes <paramref name="dispose"/> when disposed.
            </summary>
            <param name="dispose">The delegate to execute when disposed. If this is <c>null</c>, then this instance does nothing when it is disposed.</param>
        </member>
        <member name="T:Nito.Disposables.AnonymousDisposable">
            <summary>
            Equivalent to <see cref="T:Nito.Disposables.Disposable"/>.
            </summary>
        </member>
        <member name="M:Nito.Disposables.AnonymousDisposable.#ctor(System.Action)">
            <summary>
            Creates a new disposable that executes <paramref name="dispose"/> when disposed.
            </summary>
            <param name="dispose">The delegate to execute when disposed. If this is <c>null</c>, then this instance does nothing when it is disposed.</param>
        </member>
        <member name="M:Nito.Disposables.AnonymousDisposable.Dispose(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Nito.Disposables.AnonymousDisposable.Add(System.Action)">
            <summary>
            Adds a delegate to be executed when this instance is disposed. If this instance is already disposed or disposing, then <paramref name="dispose"/> is executed immediately.
            If this method is called multiple times concurrently at the same time this instance is disposed, then the different <paramref name="dispose"/> arguments may be disposed concurrently.
            </summary>
            <param name="dispose">The delegate to add. May be <c>null</c> to indicate no additional action.</param>
        </member>
        <member name="M:Nito.Disposables.AnonymousDisposable.Create(System.Action)">
            <summary>
            Creates a new disposable that executes <paramref name="dispose"/> when disposed.
            </summary>
            <param name="dispose">The delegate to execute when disposed. If this is <c>null</c>, then this instance does nothing when it is disposed.</param>
        </member>
        <member name="T:Nito.Disposables.AsyncDisposable">
            <summary>
            A disposable that executes a delegate when disposed.
            </summary>
        </member>
        <member name="M:Nito.Disposables.AsyncDisposable.#ctor(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Creates a new disposable that executes <paramref name="dispose"/> when disposed.
            </summary>
            <param name="dispose">The delegate to execute when disposed. If this is <c>null</c>, then this instance does nothing when it is disposed.</param>
        </member>
        <member name="M:Nito.Disposables.AsyncDisposable.#ctor(System.Func{System.Threading.Tasks.ValueTask},Nito.Disposables.AsyncDisposeFlags)">
            <summary>
            Creates a new disposable that executes <paramref name="dispose"/> when disposed.
            </summary>
            <param name="dispose">The delegate to execute when disposed. If this is <c>null</c>, then this instance does nothing when it is disposed.</param>
            <param name="flags">Flags that control how asynchronous disposal is handled.</param>
        </member>
        <member name="M:Nito.Disposables.AsyncDisposable.DisposeAsync(System.Func{System.Threading.Tasks.ValueTask})">
            <inheritdoc />
        </member>
        <member name="M:Nito.Disposables.AsyncDisposable.AddAsync(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Adds a delegate to be executed when this instance is disposed. If this instance is already disposed or disposing, then <paramref name="dispose"/> is executed immediately.
            If this method is called multiple times concurrently at the same time this instance is disposed, then the different <paramref name="dispose"/> arguments may be disposed concurrently, even if <see cref="F:Nito.Disposables.AsyncDisposeFlags.ExecuteSerially"/> was specified.
            </summary>
            <param name="dispose">The delegate to add. May be <c>null</c> to indicate no additional action.</param>
        </member>
        <member name="M:Nito.Disposables.AsyncDisposable.Create(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Creates a new disposable that executes <paramref name="dispose"/> when disposed.
            </summary>
            <param name="dispose">The delegate to execute when disposed. If this is <c>null</c>, then this instance does nothing when it is disposed.</param>
        </member>
        <member name="T:Nito.Disposables.AsyncDisposeFlags">
            <summary>
            Flags to control asynchronous disposal.
            </summary>
        </member>
        <member name="F:Nito.Disposables.AsyncDisposeFlags.ExecuteSerially">
            <summary>
            Execute multiple asynchronous disposal methods serially. Each asynchronous disposal method will not start until the previous one has completed.
            </summary>
        </member>
        <member name="F:Nito.Disposables.AsyncDisposeFlags.ExecuteConcurrently">
            <summary>
            Execute multiple asynchronous disposal methods concurrently. All asynchronous disposal methods are started, and then asynchronously wait for all of them to complete.
            </summary>
        </member>
        <member name="T:Nito.Disposables.CollectionAsyncDisposable">
            <summary>
            Disposes a collection of disposables.
            </summary>
        </member>
        <member name="M:Nito.Disposables.CollectionAsyncDisposable.#ctor(System.IAsyncDisposable[])">
            <summary>
            Creates a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose. May not be <c>null</c>, but entries may be <c>null</c>.</param>
        </member>
        <member name="M:Nito.Disposables.CollectionAsyncDisposable.#ctor(System.Collections.Generic.IEnumerable{System.IAsyncDisposable})">
            <summary>
            Creates a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose. May not be <c>null</c>, but entries may be <c>null</c>.</param>
        </member>
        <member name="M:Nito.Disposables.CollectionAsyncDisposable.#ctor(System.Collections.Generic.IEnumerable{System.IAsyncDisposable},Nito.Disposables.AsyncDisposeFlags)">
            <summary>
            Creates a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose. May not be <c>null</c>, but entries may be <c>null</c>.</param>
            <param name="flags">Flags that control how asynchronous disposal is handled.</param>
        </member>
        <member name="M:Nito.Disposables.CollectionAsyncDisposable.DisposeAsync(System.Collections.Immutable.ImmutableQueue{System.IAsyncDisposable})">
            <inheritdoc />
        </member>
        <member name="M:Nito.Disposables.CollectionAsyncDisposable.AddAsync(System.IAsyncDisposable)">
            <summary>
            Adds a disposable to the collection of disposables. If this instance is already disposed or disposing, then <paramref name="disposable"/> is disposed immediately.
            If this method is called multiple times concurrently at the same time this instance is disposed, then the different <paramref name="disposable"/> arguments may be disposed concurrently, even if <see cref="F:Nito.Disposables.AsyncDisposeFlags.ExecuteSerially"/> was specified.
            </summary>
            <param name="disposable">The disposable to add to our collection. May be <c>null</c>.</param>
        </member>
        <member name="M:Nito.Disposables.CollectionAsyncDisposable.Create(System.IAsyncDisposable[])">
            <summary>
            Creates a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose. May not be <c>null</c>, but entries may be <c>null</c>.</param>
        </member>
        <member name="M:Nito.Disposables.CollectionAsyncDisposable.Create(System.Collections.Generic.IEnumerable{System.IAsyncDisposable})">
            <summary>
            Creates a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose. May not be <c>null</c>, but entries may be <c>null</c>.</param>
        </member>
        <member name="T:Nito.Disposables.CollectionDisposable">
            <summary>
            Disposes a collection of disposables.
            </summary>
        </member>
        <member name="M:Nito.Disposables.CollectionDisposable.#ctor(System.IDisposable[])">
            <summary>
            Creates a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose. May not be <c>null</c>, but entries may be <c>null</c>.</param>
        </member>
        <member name="M:Nito.Disposables.CollectionDisposable.#ctor(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Creates a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose. May not be <c>null</c>, but entries may be <c>null</c>.</param>
        </member>
        <member name="M:Nito.Disposables.CollectionDisposable.Dispose(System.Collections.Immutable.ImmutableQueue{System.IDisposable})">
            <inheritdoc />
        </member>
        <member name="M:Nito.Disposables.CollectionDisposable.Add(System.IDisposable)">
            <summary>
            Adds a disposable to the collection of disposables. If this instance is already disposed or disposing, then <paramref name="disposable"/> is disposed immediately.
            If this method is called multiple times concurrently at the same time this instance is disposed, then the different <paramref name="disposable"/> arguments may be disposed concurrently.
            </summary>
            <param name="disposable">The disposable to add to our collection. May be <c>null</c>.</param>
        </member>
        <member name="M:Nito.Disposables.CollectionDisposable.Create(System.IDisposable[])">
            <summary>
            Creates a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose. May not be <c>null</c>, but entries may be <c>null</c>.</param>
        </member>
        <member name="M:Nito.Disposables.CollectionDisposable.Create(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Creates a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose. May not be <c>null</c>, but entries may be <c>null</c>.</param>
        </member>
        <member name="T:Nito.Disposables.Disposable">
            <summary>
            A disposable that executes a delegate when disposed.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Disposable.#ctor(System.Action)">
            <summary>
            Creates a new disposable that executes <paramref name="dispose"/> when disposed.
            </summary>
            <param name="dispose">The delegate to execute when disposed. If this is <c>null</c>, then this instance does nothing when it is disposed.</param>
        </member>
        <member name="M:Nito.Disposables.Disposable.Dispose(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Nito.Disposables.Disposable.Add(System.Action)">
            <summary>
            Adds a delegate to be executed when this instance is disposed. If this instance is already disposed or disposing, then <paramref name="dispose"/> is executed immediately.
            If this method is called multiple times concurrently at the same time this instance is disposed, then the different <paramref name="dispose"/> arguments may be disposed concurrently.
            </summary>
            <param name="dispose">The delegate to add. May be <c>null</c> to indicate no additional action.</param>
        </member>
        <member name="M:Nito.Disposables.Disposable.Create(System.Action)">
            <summary>
            Creates a new disposable that executes <paramref name="dispose"/> when disposed.
            </summary>
            <param name="dispose">The delegate to execute when disposed. If this is <c>null</c>, then this instance does nothing when it is disposed.</param>
        </member>
        <member name="T:Nito.Disposables.DisposableExtensions">
            <summary>
            Extension methods for disposables.
            </summary>
        </member>
        <member name="M:Nito.Disposables.DisposableExtensions.ToAsyncDisposable(System.IDisposable)">
            <summary>
            Treats the synchronous disposable as an asynchronous disposable. The asynchronous disposal will actually run synchronously.
            </summary>
            <param name="this">The synchronous disposable.</param>
        </member>
        <member name="T:Nito.Disposables.Internals.BoundActionField`1">
            <summary>
            A field containing a bound action.
            </summary>
            <typeparam name="T">The type of context for the action.</typeparam>
        </member>
        <member name="M:Nito.Disposables.Internals.BoundActionField`1.#ctor(System.Action{`0},`0)">
            <summary>
            Initializes the field with the specified action and context.
            </summary>
            <param name="action">The action delegate.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Nito.Disposables.Internals.BoundActionField`1.IsEmpty">
            <summary>
            Whether the field is empty.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.BoundActionField`1.TryGetAndUnset">
            <summary>
            Atomically retrieves the bound action from the field and sets the field to <c>null</c>. May return <c>null</c>.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.BoundActionField`1.TryUpdateContext(System.Func{`0,`0})">
            <summary>
            Attempts to update the context of the bound action stored in the field. Returns <c>false</c> if the field is <c>null</c>.
            </summary>
            <param name="contextUpdater">The function used to update an existing context. This may be called more than once if more than one thread attempts to simultaneously update the context.</param>
        </member>
        <member name="T:Nito.Disposables.Internals.BoundActionField`1.IBoundAction">
            <summary>
            An action delegate bound with its context.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.BoundActionField`1.IBoundAction.Invoke">
            <summary>
            Executes the action. This should only be done after the bound action is retrieved from a field by <see cref="M:Nito.Disposables.Internals.BoundActionField`1.TryGetAndUnset"/>.
            </summary>
        </member>
        <member name="T:Nito.Disposables.Internals.BoundAsyncActionField`1">
            <summary>
            A field containing a bound asynchronous action.
            </summary>
            <typeparam name="T">The type of context for the action.</typeparam>
        </member>
        <member name="M:Nito.Disposables.Internals.BoundAsyncActionField`1.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask},`0)">
            <summary>
            Initializes the field with the specified action and context.
            </summary>
            <param name="action">The action delegate.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Nito.Disposables.Internals.BoundAsyncActionField`1.IsEmpty">
            <summary>
            Whether the field is empty.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.BoundAsyncActionField`1.TryGetAndUnset">
            <summary>
            Atomically retrieves the bound action from the field and sets the field to <c>null</c>. May return <c>null</c>.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.BoundAsyncActionField`1.TryUpdateContext(System.Func{`0,`0})">
            <summary>
            Attempts to update the context of the bound action stored in the field. Returns <c>false</c> if the field is <c>null</c>.
            </summary>
            <param name="contextUpdater">The function used to update an existing context. This may be called more than once if more than one thread attempts to simultaneously update the context.</param>
        </member>
        <member name="T:Nito.Disposables.Internals.BoundAsyncActionField`1.IBoundAction">
            <summary>
            An action delegate bound with its context.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.BoundAsyncActionField`1.IBoundAction.InvokeAsync">
            <summary>
            Executes the action. This should only be done after the bound action is retrieved from a field by <see cref="M:Nito.Disposables.Internals.BoundAsyncActionField`1.TryGetAndUnset"/>.
            </summary>
        </member>
        <member name="T:Nito.Disposables.Internals.EnumerableExtensions">
            <summary>
            Extension methods for enumerables.
            </summary>
        </member>
        <member name="M:Nito.Disposables.Internals.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence with the `null` instances removed.
            </summary>
        </member>
        <member name="T:Nito.Disposables.NoopDisposable">
            <summary>
            A singleton disposable that does nothing when disposed.
            </summary>
        </member>
        <member name="M:Nito.Disposables.NoopDisposable.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Nito.Disposables.NoopDisposable.DisposeAsync">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="P:Nito.Disposables.NoopDisposable.Instance">
            <summary>
            Gets the instance of <see cref="T:Nito.Disposables.NoopDisposable"/>.
            </summary>
        </member>
        <member name="T:Nito.Disposables.SingleAsyncDisposable`1">
            <summary>
            A base class for disposables that need exactly-once semantics in a thread-safe way. All disposals of this instance block until the disposal is complete.
            </summary>
            <typeparam name="T">The type of "context" for the derived disposable. Since the context should not be modified, strongly consider making this an immutable type.</typeparam>
            <remarks>
            <para>If <see cref="M:Nito.Disposables.SingleAsyncDisposable`1.DisposeAsync"/> is called multiple times, only the first call will execute the disposal code. Other calls to <see cref="M:Nito.Disposables.SingleAsyncDisposable`1.DisposeAsync"/> will wait for the disposal to complete.</para>
            </remarks>
        </member>
        <member name="F:Nito.Disposables.SingleAsyncDisposable`1._context">
            <summary>
            The context. This is never <c>null</c>. This is empty if this instance has already been disposed (or is being disposed).
            </summary>
        </member>
        <member name="M:Nito.Disposables.SingleAsyncDisposable`1.#ctor(`0)">
            <summary>
            Creates a disposable for the specified context.
            </summary>
            <param name="context">The context passed to <see cref="M:Nito.Disposables.SingleAsyncDisposable`1.DisposeAsync(`0)"/>.</param>
        </member>
        <member name="P:Nito.Disposables.SingleAsyncDisposable`1.IsDisposeStarted">
            <summary>
            Whether this instance is currently disposing or has been disposed.
            </summary>
        </member>
        <member name="P:Nito.Disposables.SingleAsyncDisposable`1.IsDisposed">
            <summary>
            Whether this instance is disposed (finished disposing).
            </summary>
        </member>
        <member name="P:Nito.Disposables.SingleAsyncDisposable`1.IsDisposing">
            <summary>
            Whether this instance is currently disposing, but not finished yet.
            </summary>
        </member>
        <member name="M:Nito.Disposables.SingleAsyncDisposable`1.DisposeAsync(`0)">
            <summary>
            The actul disposal method, called only once from <see cref="M:Nito.Disposables.SingleAsyncDisposable`1.DisposeAsync"/>.
            </summary>
            <param name="context">The context for the disposal operation.</param>
        </member>
        <member name="M:Nito.Disposables.SingleAsyncDisposable`1.DisposeAsync">
            <summary>
            Disposes this instance.
            </summary>
            <remarks>
            <para>If <see cref="M:Nito.Disposables.SingleAsyncDisposable`1.DisposeAsync"/> is called multiple times, only the first call will execute the disposal code. Other calls to <see cref="M:Nito.Disposables.SingleAsyncDisposable`1.DisposeAsync"/> will wait for the disposal to complete.</para>
            </remarks>
        </member>
        <member name="M:Nito.Disposables.SingleAsyncDisposable`1.TryUpdateContext(System.Func{`0,`0})">
            <summary>
            Attempts to update the stored context. This method returns <c>false</c> if this instance has already been disposed (or is being disposed).
            </summary>
            <param name="contextUpdater">The function used to update an existing context. This may be called more than once if more than one thread attempts to simultaneously update the context.</param>
        </member>
        <member name="T:Nito.Disposables.SingleDisposable`1">
            <summary>
            A base class for disposables that need exactly-once semantics in a thread-safe way. All disposals of this instance block until the disposal is complete.
            </summary>
            <typeparam name="T">The type of "context" for the derived disposable. Since the context should not be modified, strongly consider making this an immutable type.</typeparam>
            <remarks>
            <para>If <see cref="M:Nito.Disposables.SingleDisposable`1.Dispose"/> is called multiple times, only the first call will execute the disposal code. Other calls to <see cref="M:Nito.Disposables.SingleDisposable`1.Dispose"/> will wait for the disposal to complete.</para>
            </remarks>
        </member>
        <member name="F:Nito.Disposables.SingleDisposable`1._context">
            <summary>
            The context. This is never <c>null</c>. This is empty if this instance has already been disposed (or is being disposed).
            </summary>
        </member>
        <member name="M:Nito.Disposables.SingleDisposable`1.#ctor(`0)">
            <summary>
            Creates a disposable for the specified context.
            </summary>
            <param name="context">The context passed to <see cref="M:Nito.Disposables.SingleDisposable`1.Dispose(`0)"/>. May be <c>null</c>.</param>
        </member>
        <member name="P:Nito.Disposables.SingleDisposable`1.IsDisposeStarted">
            <summary>
            Whether this instance is currently disposing or has been disposed.
            </summary>
        </member>
        <member name="P:Nito.Disposables.SingleDisposable`1.IsDisposed">
            <summary>
            Whether this instance is disposed (finished disposing).
            </summary>
        </member>
        <member name="P:Nito.Disposables.SingleDisposable`1.IsDisposing">
            <summary>
            Whether this instance is currently disposing, but not finished yet.
            </summary>
        </member>
        <member name="M:Nito.Disposables.SingleDisposable`1.Dispose(`0)">
            <summary>
            The actul disposal method, called only once from <see cref="M:Nito.Disposables.SingleDisposable`1.Dispose"/>.
            </summary>
            <param name="context">The context for the disposal operation.</param>
        </member>
        <member name="M:Nito.Disposables.SingleDisposable`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
            <remarks>
            <para>If <see cref="M:Nito.Disposables.SingleDisposable`1.Dispose"/> is called multiple times, only the first call will execute the disposal code. Other calls to <see cref="M:Nito.Disposables.SingleDisposable`1.Dispose"/> will wait for the disposal to complete.</para>
            </remarks>
        </member>
        <member name="M:Nito.Disposables.SingleDisposable`1.TryUpdateContext(System.Func{`0,`0})">
            <summary>
            Attempts to update the stored context. This method returns <c>false</c> if this instance has already been disposed (or is being disposed).
            </summary>
            <param name="contextUpdater">The function used to update an existing context. This may be called more than once if more than one thread attempts to simultaneously update the context.</param>
        </member>
        <member name="T:Nito.Disposables.SingleNonblockingAsyncDisposable`1">
            <summary>
            A base class for disposables that need exactly-once semantics in a thread-safe way.
            </summary>
            <typeparam name="T">The type of "context" for the derived disposable. Since the context should not be modified, strongly consider making this an immutable type.</typeparam>
            <remarks>
            <para>If <see cref="M:Nito.Disposables.SingleNonblockingAsyncDisposable`1.DisposeAsync"/> is called multiple times, only the first call will execute the disposal code. Other calls to <see cref="M:Nito.Disposables.SingleNonblockingAsyncDisposable`1.DisposeAsync"/> will not wait for the disposal to complete.</para>
            </remarks>
        </member>
        <member name="F:Nito.Disposables.SingleNonblockingAsyncDisposable`1._context">
            <summary>
            The context. This is never <c>null</c>. This is empty if this instance has already been disposed (or is being disposed).
            </summary>
        </member>
        <member name="M:Nito.Disposables.SingleNonblockingAsyncDisposable`1.#ctor(`0)">
            <summary>
            Creates a disposable for the specified context.
            </summary>
            <param name="context">The context passed to <see cref="M:Nito.Disposables.SingleNonblockingAsyncDisposable`1.DisposeAsync(`0)"/>.</param>
        </member>
        <member name="P:Nito.Disposables.SingleNonblockingAsyncDisposable`1.IsDisposed">
            <summary>
            Whether this instance has been disposed (or is being disposed).
            </summary>
        </member>
        <member name="M:Nito.Disposables.SingleNonblockingAsyncDisposable`1.DisposeAsync(`0)">
            <summary>
            The actul disposal method, called only once from <see cref="M:Nito.Disposables.SingleNonblockingAsyncDisposable`1.DisposeAsync"/>.
            </summary>
            <param name="context">The context for the disposal operation.</param>
        </member>
        <member name="M:Nito.Disposables.SingleNonblockingAsyncDisposable`1.DisposeAsync">
            <summary>
            Disposes this instance.
            </summary>
            <remarks>
            <para>If <see cref="M:Nito.Disposables.SingleNonblockingAsyncDisposable`1.DisposeAsync"/> is called multiple times, only the first call will execute the disposal code. Other calls to <see cref="M:Nito.Disposables.SingleNonblockingAsyncDisposable`1.DisposeAsync"/> will not wait for the disposal to complete.</para>
            </remarks>
        </member>
        <member name="M:Nito.Disposables.SingleNonblockingAsyncDisposable`1.TryUpdateContext(System.Func{`0,`0})">
            <summary>
            Attempts to update the stored context. This method returns <c>false</c> if this instance has already been disposed (or is being disposed).
            </summary>
            <param name="contextUpdater">The function used to update an existing context. This may be called more than once if more than one thread attempts to simultaneously update the context.</param>
        </member>
        <member name="T:Nito.Disposables.SingleNonblockingDisposable`1">
            <summary>
            A base class for disposables that need exactly-once semantics in a thread-safe way.
            </summary>
            <typeparam name="T">The type of "context" for the derived disposable. Since the context should not be modified, strongly consider making this an immutable type.</typeparam>
            <remarks>
            <para>If <see cref="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose"/> is called multiple times, only the first call will execute the disposal code. Other calls to <see cref="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose"/> will not wait for the disposal to complete.</para>
            </remarks>
        </member>
        <member name="F:Nito.Disposables.SingleNonblockingDisposable`1._context">
            <summary>
            The context. This is never <c>null</c>. This is empty if this instance has already been disposed (or is being disposed).
            </summary>
        </member>
        <member name="M:Nito.Disposables.SingleNonblockingDisposable`1.#ctor(`0)">
            <summary>
            Creates a disposable for the specified context.
            </summary>
            <param name="context">The context passed to <see cref="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose(`0)"/>. May be <c>null</c>.</param>
        </member>
        <member name="P:Nito.Disposables.SingleNonblockingDisposable`1.IsDisposed">
            <summary>
            Whether this instance has been disposed (or is being disposed).
            </summary>
        </member>
        <member name="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose(`0)">
            <summary>
            The actul disposal method, called only once from <see cref="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose"/>.
            </summary>
            <param name="context">The context for the disposal operation.</param>
        </member>
        <member name="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
            <remarks>
            <para>If <see cref="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose"/> is called multiple times, only the first call will execute the disposal code. Other calls to <see cref="M:Nito.Disposables.SingleNonblockingDisposable`1.Dispose"/> will not wait for the disposal to complete.</para>
            </remarks>
        </member>
        <member name="M:Nito.Disposables.SingleNonblockingDisposable`1.TryUpdateContext(System.Func{`0,`0})">
            <summary>
            Attempts to update the stored context. This method returns <c>false</c> if this instance has already been disposed (or is being disposed).
            </summary>
            <param name="contextUpdater">The function used to update an existing context. This may be called more than once if more than one thread attempts to simultaneously update the context.</param>
        </member>
    </members>
</doc>
