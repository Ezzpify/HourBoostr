<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nito.Collections.Deque</name>
    </assembly>
    <members>
        <member name="T:Nito.Collections.Deque`1">
            <summary>
            A double-ended queue (deque), which provides O(1) indexed access, O(1) removals from the front and back, amortized O(1) insertions to the front and back, and O(N) insertions and removals anywhere else (with the operations getting slower as the index approaches the middle).
            </summary>
            <typeparam name="T">The type of elements contained in the deque.</typeparam>
        </member>
        <member name="F:Nito.Collections.Deque`1.DefaultCapacity">
            <summary>
            The default capacity.
            </summary>
        </member>
        <member name="F:Nito.Collections.Deque`1._buffer">
            <summary>
            The circular _buffer that holds the view.
            </summary>
        </member>
        <member name="F:Nito.Collections.Deque`1._offset">
            <summary>
            The offset into <see cref="F:Nito.Collections.Deque`1._buffer"/> where the view begins.
            </summary>
        </member>
        <member name="M:Nito.Collections.Deque`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Collections.Deque`1"/> class with the specified capacity.
            </summary>
            <param name="capacity">The initial capacity. Must be greater than <c>0</c>.</param>
        </member>
        <member name="M:Nito.Collections.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Collections.Deque`1"/> class with the elements from the specified collection.
            </summary>
            <param name="collection">The collection. May not be <c>null</c>.</param>
        </member>
        <member name="M:Nito.Collections.Deque`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Collections.Deque`1"/> class.
            </summary>
        </member>
        <member name="P:Nito.Collections.Deque`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only. This implementation always returns <c>false</c>.
            </summary>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Nito.Collections.Deque`1.Item(System.Int32)">
            <inheritdoc cref="P:System.Collections.Generic.IList`1.Item(System.Int32)" />
        </member>
        <member name="M:Nito.Collections.Deque`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Nito.Collections.Deque`1.RemoveAt(System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" />
        </member>
        <member name="M:Nito.Collections.Deque`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Nito.Collections.Deque`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Nito.Collections.Deque`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Nito.Collections.Deque`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Nito.Collections.Deque`1.CopyToArray(System.Array,System.Int32)">
            <summary>
            Copies the deque elements into an array. The resulting array always has all the deque elements contiguously.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The optional index in the destination array at which to begin writing.</param>
        </member>
        <member name="M:Nito.Collections.Deque`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Nito.Collections.Deque`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Nito.Collections.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Nito.Collections.Deque`1.CheckNewIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to a valid insertion point in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="M:Nito.Collections.Deque`1.CheckExistingIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to an existing element in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an existing element for the source.</exception>
        </member>
        <member name="M:Nito.Collections.Deque`1.CheckRangeArguments(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="offset"/> and <paramref name="count"/> arguments for validity when applied to a source of a given length. Allows 0-element ranges, including a 0-element range at the end of the source.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="offset">The index into source at which the range begins.</param>
            <param name="count">The number of elements in the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [offset, offset + count) is not within the range [0, sourceLength).</exception>
        </member>
        <member name="P:Nito.Collections.Deque`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:Nito.Collections.Deque`1.IsFull">
            <summary>
            Gets a value indicating whether this instance is at full capacity.
            </summary>
        </member>
        <member name="P:Nito.Collections.Deque`1.IsSplit">
            <summary>
            Gets a value indicating whether the buffer is "split" (meaning the beginning of the view is at a later index in <see cref="F:Nito.Collections.Deque`1._buffer"/> than the end).
            </summary>
        </member>
        <member name="P:Nito.Collections.Deque`1.Capacity">
            <summary>
            Gets or sets the capacity for this deque. This value must always be greater than zero, and this property cannot be set to a value less than <see cref="P:Nito.Collections.Deque`1.Count"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"><c>Capacity</c> cannot be set to a value less than <see cref="P:Nito.Collections.Deque`1.Count"/>.</exception>
        </member>
        <member name="P:Nito.Collections.Deque`1.Count">
            <summary>
            Gets the number of elements contained in this deque.
            </summary>
            <returns>The number of elements contained in this deque.</returns>
        </member>
        <member name="M:Nito.Collections.Deque`1.DequeIndexToBufferIndex(System.Int32)">
            <summary>
            Applies the offset to <paramref name="index"/>, resulting in a buffer index.
            </summary>
            <param name="index">The deque index.</param>
            <returns>The buffer index.</returns>
        </member>
        <member name="M:Nito.Collections.Deque`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Nito.Collections.Deque`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Collections.Deque`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Collections.Deque`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="M:Nito.Collections.Deque`1.PostIncrement(System.Int32)">
            <summary>
            Increments <see cref="F:Nito.Collections.Deque`1._offset"/> by <paramref name="value"/> using modulo-<see cref="P:Nito.Collections.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to increase <see cref="F:Nito.Collections.Deque`1._offset"/>. May not be negative.</param>
            <returns>The value of <see cref="F:Nito.Collections.Deque`1._offset"/> after it was incremented.</returns>
        </member>
        <member name="M:Nito.Collections.Deque`1.PreDecrement(System.Int32)">
            <summary>
            Decrements <see cref="F:Nito.Collections.Deque`1._offset"/> by <paramref name="value"/> using modulo-<see cref="P:Nito.Collections.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to reduce <see cref="F:Nito.Collections.Deque`1._offset"/>. May not be negative or greater than <see cref="P:Nito.Collections.Deque`1.Capacity"/>.</param>
            <returns>The value of <see cref="F:Nito.Collections.Deque`1._offset"/> before it was decremented.</returns>
        </member>
        <member name="M:Nito.Collections.Deque`1.DoAddToBack(`0)">
            <summary>
            Inserts a single element to the back of the view. <see cref="P:Nito.Collections.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Nito.Collections.Deque`1.DoAddToFront(`0)">
            <summary>
            Inserts a single element to the front of the view. <see cref="P:Nito.Collections.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Nito.Collections.Deque`1.DoRemoveFromBack">
            <summary>
            Removes and returns the last element in the view. <see cref="P:Nito.Collections.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former last element.</returns>
        </member>
        <member name="M:Nito.Collections.Deque`1.DoRemoveFromFront">
            <summary>
            Removes and returns the first element in the view. <see cref="P:Nito.Collections.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former first element.</returns>
        </member>
        <member name="M:Nito.Collections.Deque`1.DoInsertRange(System.Int32,System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Inserts a range of elements into the view.
            </summary>
            <param name="index">The index into the view at which the elements are to be inserted.</param>
            <param name="collection">The elements to insert. The sum of <c>collection.Count</c> and <see cref="P:Nito.Collections.Deque`1.Count"/> must be less than or equal to <see cref="P:Nito.Collections.Deque`1.Capacity"/>.</param>
        </member>
        <member name="M:Nito.Collections.Deque`1.DoRemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the view.
            </summary>
            <param name="index">The index into the view at which the range begins.</param>
            <param name="collectionCount">The number of elements in the range. This must be greater than 0 and less than or equal to <see cref="P:Nito.Collections.Deque`1.Count"/>.</param>
        </member>
        <member name="M:Nito.Collections.Deque`1.EnsureCapacityForOneElement">
            <summary>
            Doubles the capacity if necessary to make room for one more element. When this method returns, <see cref="P:Nito.Collections.Deque`1.IsFull"/> is false.
            </summary>
        </member>
        <member name="M:Nito.Collections.Deque`1.AddToBack(`0)">
            <summary>
            Inserts a single element at the back of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Nito.Collections.Deque`1.AddToFront(`0)">
            <summary>
            Inserts a single element at the front of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Nito.Collections.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection of elements into this deque.
            </summary>
            <param name="index">The index at which the collection is inserted.</param>
            <param name="collection">The collection of elements to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="M:Nito.Collections.Deque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from this deque.
            </summary>
            <param name="offset">The index into the deque at which the range begins.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [<paramref name="offset"/>, <paramref name="offset"/> + <paramref name="count"/>) is not within the range [0, <see cref="P:Nito.Collections.Deque`1.Count"/>).</exception>
        </member>
        <member name="M:Nito.Collections.Deque`1.RemoveFromBack">
            <summary>
            Removes and returns the last element of this deque.
            </summary>
            <returns>The former last element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:Nito.Collections.Deque`1.RemoveFromFront">
            <summary>
            Removes and returns the first element of this deque.
            </summary>
            <returns>The former first element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:Nito.Collections.Deque`1.Clear">
            <summary>
            Removes all items from this deque.
            </summary>
        </member>
        <member name="M:Nito.Collections.Deque`1.ToArray">
            <summary>
            Creates and returns a new array containing the elements in this deque.
            </summary>
        </member>
    </members>
</doc>
